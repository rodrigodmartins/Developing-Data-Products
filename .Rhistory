makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
getmatrix <- function() x
setmean <- function(invert) inv <<- invert
getmean <- function() inv
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cacheSolve <- function(x, ...) {
inv <- x$getmean()
if(!is.null(inv)) {
message("getting cached inverted matrix")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setmean(inv)
inv
}
r<-makeCacheMatrix(m)
r$getmatrix
m
r
r$getmatrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setmean <- function(invert) inv <<- invert
getmean <- function() inv
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cacheSolve <- function(x, ...) {
inv <- x$getmean()
if(!is.null(inv)) {
message("getting cached inverted matrix")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setmean(inv)
inv
}
r<-makeCacheMatrix(m)
r$get()
r$getmean()
cacheSolve(r)
r$getmean()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
getmatrix <- function() x
setmean <- function(invert) inv <<- invert
getmean <- function() inv
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cacheSolve <- function(x, ...) {
inv <- x$getmean()
if(!is.null(inv)) {
message("getting cached inverted matrix")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setmean(inv)
inv
}
r<-makeCacheMatrix(m)
r$getmatrix()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get_mtx <- function() x
set_inv_mtx <- function(invert) inv <<- invert
get_inv_mtx <- function() inv
list(set = set, get = get,
set_inv_mtx = set_inv_mtx,
get_inv_mtx = get_inv_mtx)
}
cacheSolve <- function(x, ...) {
inv <- x$get_inv_mtx()
if(!is.null(inv)) {
message("getting cached inverted matrix")
return(inv)
}
data <- x$get_mtx()
inv <- solve(data, ...)
x$set_inv_mtx(inv)
inv
}
m
r<-makeCacheMatrix(m)
r$get_mtx()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get_mtx <- function() x
set_inv_mtx <- function(invert) inv <<- invert
get_inv_mtx <- function() inv
list(set = set, get_mtx = get_mtx,
set_inv_mtx = set_inv_mtx,
get_inv_mtx = get_inv_mtx)
}
cacheSolve <- function(x, ...) {
inv <- x$get_inv_mtx()
if(!is.null(inv)) {
message("getting cached inverted matrix")
return(inv)
}
data <- x$get_mtx()
inv <- solve(data, ...)
x$set_inv_mtx(inv)
inv
}
r<-makeCacheMatrix(m)
r$get_mtx()
r$set_inv_mtx
r$set_inv_mtx()
r$get_inv_mtx()
cacheSolve(r)
r$get_inv_mtx()
m2<-matrix(rnorm(16,4,4))
m2
m2<-matrix(rnorm(16),4,4)
m2
a<-makeCacheMatrix(m2)
a$get_metx()
a$get_mtx()
r$get_mtx()
a$get_inv_mtx()
cacheSolve(a)
a$get_inv_mtx()
cacheSolve(a)
cacheSolve(r)
r$get_inv_mtx()
r$set(m2)
cacheSolve(r)
cacheSolve(r)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set_mtx <- function(y) {
x <<- y
inv <<- NULL
}
get_mtx <- function() x
set_inv_mtx <- function(invert) inv <<- invert
get_inv_mtx <- function() inv
list(set_mtx = set_mtx, get_mtx = get_mtx,
set_inv_mtx = set_inv_mtx,
get_inv_mtx = get_inv_mtx)
}
cacheSolve <- function(x, ...) {
inv <- x$get_inv_mtx()
if(!is.null(inv)) {
message("getting cached inverted matrix")
return(inv)
}
data <- x$get_mtx()
inv <- solve(data, ...)
x$set_inv_mtx(inv)
inv
}
m
m2
a<-makeCacheMatrix(m)
b<-makeCacheMatrix(m2)
a$get_mtx()
b$get_mtx()
a$get_inv_mtx()
b$get_inv_mtx()
cacheSolve(a)
cacheSolve(b)
cacheSolve(a)
cacheSolve(b)
a$get_inv_mtx()
b$get_inv_mtx()
a$set_mtx(m2)
b$set_mtx(m)
cacheSolve(a)
cacheSolve(a)
b$get_inv_mtx()
cacheSolve(b)
cacheSolve(b)
b$get_inv_mtx()
install.packages('xtable')
rm(list=ls())
clean()
clear()
activity_na<-activity[!na,]
inputed[na]
imputed_na[na]
for(i in activity_imputed$weekday){
weekend<-data.frame(weekend="")
if(activity_imputed$weekday==("Monday" | "Tuedsday" | "Wednesday" | "Thursday" | "Friday"){
weekend<-rbind("No")
}else{
weekend<-rbind("Yes")
}
}
activity_imputed$weekday==("Monday" | "Tuedsday" | "Wednesday" | "Thursday" | "Friday")
rm(list=ls())
The first step, as expected, is to change the working directory in R to be the same as the compacted file `repdata-data-StormData.csv.bz2`
library(manipulate)
?manipulate
library(manipulate)mu0 = 30myplot <- function(sigma, mua, n, alpha) {    g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))    g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,                                                                  sd = sigma/sqrt(n)), size = 2, col = "red")    g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,                                                                  sd = sigma/sqrt(n)), size = 2, col = "blue")    xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)    g = g + geom_vline(xintercept = xitc, size = 3)    g}manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial = 4),           mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,                                                                    initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
library(manipulate)mu0 = 30myplot <- function(sigma, mua, n, alpha) {    g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))    g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,                                                                  sd = sigma/sqrt(n)), size = 2, col = "red")    g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,                                                                  sd = sigma/sqrt(n)), size = 2, col = "blue")    xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)    g = g + geom_vline(xintercept = xitc, size = 3)    g}
library(manipulate)mu0 = 30myplot <- function(sigma, mua, n, alpha) {    g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))    g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,                                                                  sd = sigma/sqrt(n)), size = 2, col = "red")    g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,                                                                  sd = sigma/sqrt(n)), size = 2, col = "blue")    xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)    g = g + geom_vline(xintercept = xitc, size = 3)    g}manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial = 4),mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
mu0 = 30myplot <- function(sigma, mua, n, alpha) {    g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))    g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,                                                                  sd = sigma/sqrt(n)), size = 2, col = "red")    g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,                                                                  sd = sigma/sqrt(n)), size = 2, col = "blue")    xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)    g = g + geom_vline(xintercept = xitc, size = 3)    g}
library(manipulate)mu0 = 30myplot <- function(sigma, mua, n, alpha) {    g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))    g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,sd = sigma/sqrt(n)), size = 2, col = "red")    g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,sd = sigma/sqrt(n)), size = 2, col = "blue")    xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)    g = g + geom_vline(xintercept = xitc, size = 3)    g}
pd_lower_limit<-0
pd_upper_limit<-12
steps<-200
acceptance_number<-10
batch_size<-1300
sample_size<-125
df<-as.data.frame(round(seq(pd_lower_limit,pd_upper_limit,length.out=steps),digits=4))
colnames(df)<-"pd"
pa<-numeric()
for(p in df$pd){
temp<-phyper(acceptance_number,(batch_size*p*0.01),(batch_size-(batch_size*p*0.01)),sample_size,lower.tail=T)
pa<-c(pa,round(as.vector(temp),digits=4))}
#df$pa<-as.data.frame(pa)
df$pa<-cbind(pa)
plot(x=df$pd,y=df$pa,type="l",xaxt="n",yaxt="n",lty=1,lwd=2,xlab="",ylab="",col="blue")
axis(1,at=c(seq(pd_lower_limit,pd_upper_limit,by=1)),las=1,cex.axis=1)
axis(2,at=c(seq(0,1,by=0.1)),las=2,cex.axis=1)
title(main=list("Operating Characteristic Curve - OCC", col="red"))
title(xlab=list("Incoming quality (percent defective) - pd", col="red"))
title(ylab=list("Probability of acceptance - pa", col="red"))
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
legend(8.8,0.95,paste("Batch size:",batch_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(8.8,0.85,paste("Sample size:",sample_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(8.8,0.75,paste("Acceptance number:",acceptance_number),cex=0.9,text.col="blue",box.col="white",bg="white")
pd_lower_limit<-0
pd_upper_limit<-12
steps<-200
acceptance_number<-10
batch_size<-1300
sample_size<-125
df<-as.data.frame(round(seq(pd_lower_limit,pd_upper_limit,length.out=steps),digits=4))
colnames(df)<-"pd"
pa<-numeric()
for(p in df$pd){
temp<-phyper(acceptance_number,(batch_size*p*0.01),(batch_size-(batch_size*p*0.01)),sample_size,lower.tail=T)
pa<-c(pa,round(as.vector(temp),digits=4))}
#df$pa<-as.data.frame(pa)
df$pa<-cbind(pa)
plot(x=df$pd,y=df$pa,type="l",xaxt="n",yaxt="n",lty=1,lwd=2,xlab="",ylab="",col="blue")
axis(1,at=c(seq(pd_lower_limit,pd_upper_limit,by=1)),las=1,cex.axis=1)
axis(2,at=c(seq(0,1,by=0.1)),las=2,cex.axis=1)
title(main=list("Operating Characteristic Curve - OCC", col="red"))
title(xlab=list("Incoming quality (percent defective) - pd", col="red"))
title(ylab=list("Probability of acceptance - pa", col="red"))
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
legend(pd_upper_limit-3,0.95,paste("Batch size:",batch_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-3,0.85,paste("Sample size:",sample_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-3,0.75,paste("Acceptance number:",acceptance_number),cex=0.9,text.col="blue",box.col="white",bg="white")
pd_lower_limit<-0
pd_upper_limit<-12
steps<-200
acceptance_number<-10
batch_size<-1300
sample_size<-125
df<-as.data.frame(round(seq(pd_lower_limit,pd_upper_limit,length.out=steps),digits=4))
colnames(df)<-"pd"
pa<-numeric()
for(p in df$pd){
temp<-phyper(acceptance_number,(batch_size*p*0.01),(batch_size-(batch_size*p*0.01)),sample_size,lower.tail=T)
pa<-c(pa,round(as.vector(temp),digits=4))}
#df$pa<-as.data.frame(pa)
df$pa<-cbind(pa)
plot(x=df$pd,y=df$pa,type="l",xaxt="n",yaxt="n",lty=1,lwd=2,xlab="",ylab="",col="blue")
axis(1,at=c(seq(pd_lower_limit,pd_upper_limit,by=1)),las=1,cex.axis=1)
axis(2,at=c(seq(0,1,by=0.1)),las=2,cex.axis=1)
title(main=list("Operating Characteristic Curve - OCC", col="red"))
title(xlab=list("Incoming quality (percent defective) - pd", col="red"))
title(ylab=list("Probability of acceptance - pa", col="red"))
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
legend(pd_upper_limit-4,0.95,paste("Batch size:",batch_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-4,0.85,paste("Sample size:",sample_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-4,0.75,paste("Acceptance number:",acceptance_number),cex=0.9,text.col="blue",box.col="white",bg="white")
pd_lower_limit<-0
pd_upper_limit<-12
steps<-200
acceptance_number<-10
batch_size<-1300
sample_size<-125
df<-as.data.frame(round(seq(pd_lower_limit,pd_upper_limit,length.out=steps),digits=4))
colnames(df)<-"pd"
pa<-numeric()
for(p in df$pd){
temp<-phyper(acceptance_number,(batch_size*p*0.01),(batch_size-(batch_size*p*0.01)),sample_size,lower.tail=T)
pa<-c(pa,round(as.vector(temp),digits=4))}
#df$pa<-as.data.frame(pa)
df$pa<-cbind(pa)
plot(x=df$pd,y=df$pa,type="l",xaxt="n",yaxt="n",lty=1,lwd=2,xlab="",ylab="",col="blue")
axis(1,at=c(seq(pd_lower_limit,pd_upper_limit,by=1)),las=1,cex.axis=1)
axis(2,at=c(seq(0,1,by=0.1)),las=2,cex.axis=1)
title(main=list("Operating Characteristic Curve - OCC", col="red"))
title(xlab=list("Incoming quality (percent defective) - pd", col="red"))
title(ylab=list("Probability of acceptance - pa", col="red"))
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
legend(pd_upper_limit-4.5,0.95,paste("Batch size:",batch_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-4.5,0.85,paste("Sample size:",sample_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-4.5,0.75,paste("Acceptance number:",acceptance_number),cex=0.9,text.col="blue",box.col="white",bg="white")
pd_lower_limit<-0
pd_upper_limit<-12
steps<-200
acceptance_number<-10
batch_size<-1300
sample_size<-125
df<-as.data.frame(round(seq(pd_lower_limit,pd_upper_limit,length.out=steps),digits=4))
colnames(df)<-"pd"
pa<-numeric()
for(p in df$pd){
temp<-phyper(acceptance_number,(batch_size*p*0.01),(batch_size-(batch_size*p*0.01)),sample_size,lower.tail=T)
pa<-c(pa,round(as.vector(temp),digits=4))}
#df$pa<-as.data.frame(pa)
df$pa<-cbind(pa)
plot(x=df$pd,y=df$pa,type="l",xaxt="n",yaxt="n",lty=1,lwd=2,xlab="",ylab="",col="blue")
axis(1,at=c(seq(pd_lower_limit,pd_upper_limit,by=1)),las=1,cex.axis=1)
axis(2,at=c(seq(0,1,by=0.1)),las=2,cex.axis=1)
title(main=list("Operating Characteristic Curve - OCC", col="red"))
title(xlab=list("Incoming quality (percent defective) - pd", col="red"))
title(ylab=list("Probability of acceptance - pa", col="red"))
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
legend(pd_upper_limit-4.2,0.95,paste("Batch size:",batch_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-4.2,0.85,paste("Sample size:",sample_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-4.2,0.75,paste("Acceptance number:",acceptance_number),cex=0.9,text.col="blue",box.col="white",bg="white")
pd_lower_limit<-0
pd_upper_limit<-12
steps<-200
acceptance_number<-10
batch_size<-1300
sample_size<-125
df<-as.data.frame(round(seq(pd_lower_limit,pd_upper_limit,length.out=steps),digits=4))
colnames(df)<-"pd"
pa<-numeric()
for(p in df$pd){
temp<-phyper(acceptance_number,(batch_size*p*0.01),(batch_size-(batch_size*p*0.01)),sample_size,lower.tail=T)
pa<-c(pa,round(as.vector(temp),digits=4))}
#df$pa<-as.data.frame(pa)
df$pa<-cbind(pa)
plot(x=df$pd,y=df$pa,type="l",xaxt="n",yaxt="n",lty=1,lwd=2,xlab="",ylab="",col="blue")
axis(1,at=c(seq(pd_lower_limit,pd_upper_limit,by=1)),las=1,cex.axis=1)
axis(2,at=c(seq(0,1,by=0.1)),las=2,cex.axis=1)
title(main=list("Operating Characteristic Curve - OCC", col="red"))
title(xlab=list("Incoming quality (percent defective) - pd", col="red"))
title(ylab=list("Probability of acceptance - pa", col="red"))
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
legend(pd_upper_limit-4,0.95,paste("Batch size:",batch_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-4,0.85,paste("Sample size:",sample_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-4,0.75,paste("Acceptance number:",acceptance_number),cex=0.9,text.col="blue",box.col="white",bg="white")
df
ggplot(data=df,aes(pd,pa))+geom_line()
library(ggplot2)
ggplot(data=df,aes(pd,pa))+geom_line()
pd
pa
pd_lower_limit<-0
pd_upper_limit<-12
steps<-200
acceptance_number<-10
batch_size<-1300
sample_size<-125
df<-as.data.frame(round(seq(pd_lower_limit,pd_upper_limit,length.out=steps),digits=4))
colnames(df)<-"Pd"
pa<-numeric()
for(p in df$Pd){
temp<-phyper(acceptance_number,(batch_size*p*0.01),(batch_size-(batch_size*p*0.01)),sample_size,lower.tail=T)
Pa<-c(Pa,round(as.vector(temp),digits=4))}
df$Pa<-cbind(Pa)
pd_lower_limit<-0
pd_upper_limit<-12
steps<-200
acceptance_number<-10
batch_size<-1300
sample_size<-125
df<-as.data.frame(round(seq(pd_lower_limit,pd_upper_limit,length.out=steps),digits=4))
colnames(df)<-"Pd"
Pa<-numeric()
for(p in df$Pd){
temp<-phyper(acceptance_number,(batch_size*p*0.01),(batch_size-(batch_size*p*0.01)),sample_size,lower.tail=T)
Pa<-c(Pa,round(as.vector(temp),digits=4))}
df$Pa<-cbind(Pa)
df
ggplot(data=df,aes(Pd,Pa))+geom_line()
ggplot(df,aes(Pd,Pa))+geom_line()
qplot(Pd,Pa,df,geom="line")
qplot(df,Pd,Pa,geom="line")
qplot(data=df,x=Pd,y=Pa,geom="line")
plot(x=df$Pd,y=df$Pa,type="l",xaxt="n",yaxt="n",lty=1,lwd=2,xlab="",ylab="",col="blue")
axis(1,at=c(seq(pd_lower_limit,pd_upper_limit,by=1)),las=1,cex.axis=1)
axis(2,at=c(seq(0,1,by=0.1)),las=2,cex.axis=1)
title(main=list("Operating Characteristic Curve - OCC", col="red"))
title(xlab=list("Incoming quality (percent defective) - pd", col="red"))
title(ylab=list("Probability of acceptance - pa", col="red"))
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
legend(pd_upper_limit-4,0.95,paste("Batch size:",batch_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-4,0.85,paste("Sample size:",sample_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-4,0.75,paste("Acceptance number:",acceptance_number),cex=0.9,text.col="blue",box.col="white",bg="white")
pd_lower_limit<-0
pd_upper_limit<-12
steps<-200
acceptance_number<-10
batch_size<-1300
sample_size<-125
df<-as.data.frame(round(seq(pd_lower_limit,pd_upper_limit,length.out=steps),digits=4))
colnames(df)<-"Pd"
par(mfrow=c(1,2))
Pa<-numeric()
for(p in df$Pd){
temp<-phyper(acceptance_number,(batch_size*p*0.01),(batch_size-(batch_size*p*0.01)),sample_size,lower.tail=T)
Pa<-c(Pa,round(as.vector(temp),digits=4))}
df$Pa<-cbind(Pa)
plot(x=df$Pd,y=df$Pa,type="l",xaxt="n",yaxt="n",lty=1,lwd=2,xlab="",ylab="",col="blue")
axis(1,at=c(seq(pd_lower_limit,pd_upper_limit,by=1)),las=1,cex.axis=1)
axis(2,at=c(seq(0,1,by=0.1)),las=2,cex.axis=1)
title(main=list("Operating Characteristic Curve - OCC", col="red"))
title(xlab=list("Incoming quality (percent defective) - pd", col="red"))
title(ylab=list("Probability of acceptance - pa", col="red"))
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
legend(pd_upper_limit-4,0.95,paste("Batch size:",batch_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-4,0.85,paste("Sample size:",sample_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-4,0.75,paste("Acceptance number:",acceptance_number),cex=0.9,text.col="blue",box.col="white",bg="white")
Pa<-numeric()
for(p in df$Pd){
temp<-phyper(acceptance_number,(batch_size*p*0.01),(batch_size-(batch_size*p*0.01)),sample_size,lower.tail=T)
Pa<-c(Pa,round(as.vector(temp),digits=4))}
df$Pa<-cbind(Pa)
plot(x=df$Pd,y=df$Pa,type="l",xaxt="n",yaxt="n",lty=1,lwd=2,xlab="",ylab="",col="blue")
axis(1,at=c(seq(pd_lower_limit,pd_upper_limit,by=1)),las=1,cex.axis=1)
axis(2,at=c(seq(0,1,by=0.1)),las=2,cex.axis=1)
title(main=list("Operating Characteristic Curve - OCC", col="red"))
title(xlab=list("Incoming quality (percent defective) - pd", col="red"))
title(ylab=list("Probability of acceptance - pa", col="red"))
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
legend(pd_upper_limit-4,0.95,paste("Batch size:",batch_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-4,0.85,paste("Sample size:",sample_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-4,0.75,paste("Acceptance number:",acceptance_number),cex=0.9,text.col="blue",box.col="white",bg="white")
pd_lower_limit<-0
pd_upper_limit<-12
steps<-200
acceptance_number<-10
batch_size<-1300
sample_size<-125
df<-as.data.frame(round(seq(pd_lower_limit,pd_upper_limit,length.out=steps),digits=4))
colnames(df)<-"Pd"
Pa<-numeric()
for(p in df$Pd){
temp<-phyper(acceptance_number,(batch_size*p*0.01),(batch_size-(batch_size*p*0.01)),sample_size,lower.tail=T)
Pa<-c(Pa,round(as.vector(temp),digits=4))}
df$Pa<-cbind(Pa)
plot(x=df$Pd,y=df$Pa,type="l",xaxt="n",yaxt="n",lty=1,lwd=2,xlab="",ylab="",col="blue")
axis(1,at=c(seq(pd_lower_limit,pd_upper_limit,by=1)),las=1,cex.axis=1)
axis(2,at=c(seq(0,1,by=0.1)),las=2,cex.axis=1)
title(main=list("Operating Characteristic Curve - OCC", col="red"))
title(xlab=list("Incoming quality (percent defective) - pd", col="red"))
title(ylab=list("Probability of acceptance - pa", col="red"))
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
legend(pd_upper_limit-4,0.95,paste("Batch size:",batch_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-4,0.85,paste("Sample size:",sample_size),cex=0.9,text.col="blue",box.col="white",bg="white")
legend(pd_upper_limit-4,0.75,paste("Acceptance number:",acceptance_number),cex=0.9,text.col="blue",box.col="white",bg="white")
install.packages('caret')
library(caret)
library(kernlab)
install.packages('e1071')
rm(list=ls)
rm(list=ls())
ls()
data(mtcars)
mtcars
?mtcars
load(datasets)
install.packages(datasets)
install.packages('datasets')
install.packages("datasets")
library(datasets)
pairs(mtcars)
str(mtcars)
mtcars$cyl<-as.factor(mtcars$cyl)
mtcars$vs<-as.factor(mtcars$vs)
mtcars$am<-as.factor(mtcars$am)
mtcars$gear<-as.factor(mtcars$gear)
mtcars$carb<-as.factor(mtcars$carb)
str(mtcars)
myWineApp
setwd('/Volumes/Documentos importantes/Coursera/9 - Developing Data Products/GitHub/Developing-Data-Products')
========================================================
https://github.com/rodrigodmartins/Developing-Data-Products/blob/master/myWine.R    (Code script)
shiny::runApp()
